from __future__ import annotations

from collections import defaultdict
from itertools import starmap

from joblib import dump
from numpy import mean
from sklearn.model_selection import LeaveOneOut
from sklearn.tree import DecisionTreeClassifier

from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_tester.ai_tester import (  # noqa: E501
    AITester,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_tester.sklearn_tester import (  # noqa: E501
    SklearnTester,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_tester.statistic_calculator.MAE_calculator import (  # noqa: E501
    MAECalculator,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_tester.statistic_calculator.MSE_calculator import (  # noqa: E501
    MSECalculator,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_trainer.ai_trainer import (  # noqa: E501
    AITrainer,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.AI_loop.AI_trainer.sklearn_trainer import (  # noqa: E501
    SklearnTrainer,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.data_creator.data_creator import (  # noqa: E501
    DataCreator,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.data_creator.recently_learned_data_creator import (  # noqa: E501
    RecentlyLearnedDataCreator,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.data_creator.results_getter.user_filtered_results import (  # noqa: E501
    UserFilteredResults,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.data_encoder.day_grained_encoder import (  # noqa: E501
    DayGrainedDataEncoder,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.data_encoder.samples_divisor.window_divisor import (  # noqa: E501
    WindowDivisor,
)
from tests.src.flashcard_a_i.flashcard_ai.learn_criterion.AI_component.train_evaluators.trainer import (  # noqa: E501
    Trainer,
)
from tests.src.flashcard_a_i.models.user import User


class LOOTrainer(Trainer):
    def __init__(
        self,
        data_creator: DataCreator,
        ai_trainer: AITrainer,
        ai_tester: AITester,
    ):
        """
        Initializes a LOOTrainer instance with data creator, AI trainer, and AI
        tester instances.
        :param ai_tester: An instance of the AITester class responsible for
        evaluating the AI model.
        :param data_creator: An instance of the DataCreator class responsible
        for generating and managing the data used for training the AI model.
        :param ai_trainer: An instance of the AITrainer class responsible for
        training the AI model using the provided data.
        :return: None
        """
        self.ai_tester = ai_tester
        self.ai_trainer = ai_trainer
        self.data_creator = data_creator
        self._x, self._y = None, None
        self._model = None

    def test(self):
        """
        Executes a leave-one-out cross-validation test on the AI model using
        data generated by the data creator.
        :return: A dictionary of averaged test results.
        """
        self._x, self._y = self.data_creator.create_data_combined()

        def _get_results(train_indexes, test_indexes):
            """
            Trains a model using the provided training indexes and tests it
            using the provided test indexes.
            :param train_indexes: Indexes of the training data used for model
            training.
            :param test_indexes: Indexes of the test data used for model
            evaluation.
            :return: Test results from the model.
            """
            model = self.ai_trainer.train(
                self._x[train_indexes], self._y[train_indexes]
            )
            return self.ai_tester.test(
                model, self._x[test_indexes], self._y[test_indexes]
            )

        combined = defaultdict(list)
        for results in starmap(
            _get_results, LeaveOneOut().split(self._x, self._y)
        ):
            for key, value in results.items():
                combined[key].append(value)
        return {key: mean(value) for key, value in combined.items()}


if __name__ == "__main__":
    metrics = [
        MAECalculator(),
        MSECalculator(),
    ]

    def test(encoder_type, regressor, n_recent_tries):
        """
        Tests a specified regressor with a given encoder type and number of
        recent tries, printing the results.
        :param n_recent_tries: The number of recent tries to consider for the
        test.
        :param regressor: The regression model to be tested.
        :param encoder_type: The type of encoder to be used for data
        processing.
        :return: Test results from the LOOTrainer.
        """
        encoder = encoder_type(WindowDivisor(n_recent_tries))
        results_getter = UserFilteredResults(
            User.select().where(User.name == "Filip")
        )
        data_creator = RecentlyLearnedDataCreator(
            encoder, results_getter, include_translations=True
        )
        print(
            n_recent_tries,
            encoder_type.__name__,
            type(regressor).__name__,
            LOOTrainer(
                data_creator,
                SklearnTrainer(regressor),
                SklearnTester(metrics),
            ).test(),
        )

    # tuple(
    #     starmap(
    #         test,
    #         product(
    #             (
    #                 DayGrainedDataEncoder,
    #                 # NoDatesEncoder,
    #             ),
    #             (
    #                 DecisionTreeClassifier(),
    #                 # LogisticRegression(max_iter=10000),
    #             ),
    #             range(1, 15),
    #         ),
    #     )
    # )
    # test(DayGrainedDataEncoder, 2, DecisionTreeClassifier())
    n_recent_tries = 11
    encoder = DayGrainedDataEncoder(WindowDivisor(n_recent_tries))
    data_creator = RecentlyLearnedDataCreator(
        encoder,
        UserFilteredResults(User.select().where(User.name == "Filip")),
        include_translations=True,
    )
    model = Trainer(
        data_creator,
        SklearnTrainer(DecisionTreeClassifier()),
        SklearnTester(metrics),
    ).train()
    model_path = "PredictionModel.joblib"
    dump(model, model_path)
